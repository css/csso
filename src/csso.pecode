pecode CSSOParser {

    @t = [#.info, #.name],
    @t0 = [#.info, #.name, #0],
    @t1 = [#.info, #.name, #1],
    @tc0 = [#.info, #.name].concat(#0),

    unknown = munknown -> @t0,

    mstring1 = !('"', '\\"') -> #0,

    mstring2 = !("'", "\\'") -> #0,

    mstring = '"' *('\\"', mstring1) '"' -> ('"' + #1.join('') + '"')
            | "'" *("\\'", mstring2) "'" -> ("'" + #1.join('') + "'"),

    string = mstring -> @t0,

    escape = '\\' #char -> ('\\' + #1),

    ident = mident -> @t0,

    atkeyword = '@' ident -> @t1,

    shash = '#' mname -> @t1,

    vhash = '#' mname2 -> @t1,

    number = mnumber -> @t0,

    percentage = number '%' -> @t0,

    ident2 = mname2 -> [#.info, 'ident', #0],

    dimension = number ident2 -> [#.info, #.name, #0, #1],

    cdo = '<!--' -> @t,

    cdc = '-->' -> @t,

    s = +mw -> [#.info, #.name, #0.join('')],

    attrselector = ('=', '~=', '^=', '$=', '*=', '|=', '~') -> @t0,

    delim = ',' -> @t,

    comment = mcomment1 -> @t0,

    sc = (s, comment) -> #0,

    tset = (vhash, any, sc, operator) -> #0,

    stylesheet = *(cdo, cdc, sc, statement, unknown) -> @tc0,

    statement = (ruleset, atrule) -> #0,

    atruleb = atkeyword *tset block -> [#.info, #.name, #0].concat(#1, [#2]),

    atrules = atkeyword *tset ';' -> [#.info, #.name, #0].concat(#1),

    atrulerq = *tset -> @tc0,

    atrulers = *sc *ruleset *sc -> [#.info, #.name].concat(#0, #1, #2),

    atruler = atkeyword atrulerq '{' atrulers '}' -> [#.info, #.name, #0, #1, #3],

    atrule = (atruler, atruleb, atrules) -> #0,

    blockdecl = *sc (filter, declaration) decldelim *sc -> [].concat(#0, [#1], [#2], #3)
              | *sc (filter, declaration) *sc -> [].concat(#0, [#1], #2)
              | *sc decldelim *sc -> [].concat(#0, [#1], #2)
              | +sc -> #0,

    decldelim = ';' -> @t,

    block = '{' *blockdecl '}' -> this._cc([#.info, #.name], #1),

    ruleset = *selector block -> [#.info, #.name].concat(#0, [#1]),

    combinator = ('+', '>', '~') -> @t0,

    attrib = '[' *sc ident *sc attrselector *sc (ident, string) *sc ']' -> [#.info, #.name].concat(#1, [#2], #3, [#4], #5, [#6], #7)
           | '[' *sc ident *sc ']' -> [#.info, #.name].concat(#1, [#2], #3),

    clazz = '.' ident -> @t1,

    pseudoe = '::' ident -> @t1,

    pseudoc = ':' (funktion, ident) -> @t1,

    pseudo = (pseudoe, pseudoc) -> #0,

    nthf = ':' 'nth-' ('child', 'last-child', 'of-type', 'last-of-type') -> [#.info, 'ident', #1 + #2],

    nth = +(/^[\d]/1, 'n') -> [#.info, #.name, #0.join('')]
        | ('even', 'odd') -> @t0,

    nthselector = nthf '(' *(sc, unary, nth) ')' -> [#.info, #.name, #0].concat(#2),

    namespace = '|' -> @t,

    simpleselector = +(nthselector, combinator, attrib, pseudo, clazz, shash, any, sc, namespace) -> this._cc([#.info, #.name], [#0]),

    selector = +(simpleselector, delim) -> @tc0,

    declaration = property ':' value -> [#.info, #.name, #0, #2],

    filtern = ('-filter', '$filter', '_filter', '*filter', '-ms-filter', 'filter') -> [#.info, 'ident', #0],

    filterp = filtern *sc -> [#.info, 'property', #0].concat(#1),

    progid0 = !(')', mstring, mcomment2) -> #0,

    progid1 = 'progid:DXImageTransform.Microsoft.' /^[a-zA-Z]+/25 '(' +(mstring, mcomment2, progid0) ')' -> [#.info, 'raw', #0 + #1 + '(' + #3.join('') + ')'],

    progid = *sc progid1 *sc -> [#.info, #.name].concat(#0, [#1], #2),

    filterv = +progid -> @tc0,

    filter = filterp ':' filterv -> [#.info, #.name, #0, #2],

    identp = '//' mident -> [#.info, 'ident', #0 + #1],

    property = identp *sc -> [#.info, #.name, #0].concat(#1)
             | ident *sc -> [#.info, #.name, #0].concat(#1),

    important = '!' *sc 'important' -> [#.info, #.name].concat(#1),

    unary = ('-', '+') -> @t0,

    operator = ('/', ',', ':', '=') -> @t0,

    uri0 = !(')', mw) -> [#.info, 'raw', #0],

    uri = 'url(' *sc string *sc ')' -> [#.info, #.name].concat(#1, [#2], #3)
        | 'url(' *sc uri0 *sc ')' -> [#.info, #.name].concat(#1, [#2], #3),

    value = +(sc, vhash, any, block, atkeyword, operator, important) -> @tc0,

    functionBody = *tset -> @tc0,

    funktion = notselector -> #0
             | ident '(' functionBody ')' -> [#.info, #.name, #0, #2],

    notselectorident = 'not' -> [#.info, 'ident', #0],

    notselector = notselectorident '(' notselectorBody ')' -> [#.info, 'funktion', #0, #2],

    notselectorBody = ?simpleselector -> [#.info, 'functionBody', #0],

    braces = '(' *tset ')' -> [#.info, #.name, '(', ')'].concat(#1)
           | '[' *tset ']' -> [#.info, #.name, '[', ']'].concat(#1),

    jsLT = ('\n', '\r') -> #0,

    jsComment = (jsMLComment, jsSLComment) -> #0,

    jsMLComment = '/*' !'*/' '*/' -> (#0 + (#1 ? #1 : '') + #2),

    jsSLComment = '//' !jsLT -> ('//' + (#1 ? #1 : '')),

    jsString = '"' *jsDSChar '"' -> ('"' + #1.join('') + '"')
             | '\'' *jsSSChar '\'' -> ('\'' + #1.join('') + '\''),

    jsDSChar = !('"', '\\', jsLT, jsEscapeChar, jsLineContinuation) -> #0
             | jsEscapeChar -> #0
             | jsLineContinuation -> #0,

    jsSSChar = !('\'', '\\', jsLT, jsEscapeChar, jsLineContinuation) -> #0
             | jsEscapeChar -> #0
             | jsLineContinuation -> #0,

    jsLineContinuation = '\\' *jsLT -> ('\\' + #1.join('')),

    jsEscapeChar = '\\' #char -> ('\\' + #1),

    jsInBraceChar = !('(', ')', jsComment, jsString, jsEscapeChar) -> #0,

    jsBracesContent = +(jsComment, jsString, jsEscapeChar, jsInBraceChar) -> #0.join(''),

    feb = functionExpressionBody *jsBracesContent -> (#0 + #1.join('')),

    functionExpressionBody = '(' +jsBracesContent *feb ')' -> ('(' + #1.join('') + #2.join('') + ')')
                           | '(' *feb ')' -> ('(' + #1.join('') + ')')
                           | +jsBracesContent *feb -> (#0.join('') + #1.join('')),

    functionExpression = 'expression(' *functionExpressionBody ')' -> [#.info, #.name, #1.join('')],

    any = (braces, string, percentage, dimension, number, uri, functionExpression, funktion, ident, unary) -> #0
}
